package queue;

/**
 *  author:wangjinnan
 * date:2020/8/24 0024  17:02
 * description:
 *  
 */
public class CircleArrayQueueDemo {
    public static void main(String[] args) {

    }
}

class CircleArray{
    private int maxSize;//表示数组的最大容量
    //front含义做一个调整: front就指向队列的第一个元素,也就是说arr[front]就是队列的第一个元素 front的初始值=0
    private int front;//队列头
    //rear含义做一个调整: rear指向队列的最后一个元素的后一个位置,因为希望空出一个空间作为约定,rear的初始值=0
    private int rear;//队列尾
    private int[] arr;//用于存放数据，模拟队列

    public CircleArray(int arrMaxSize){
        maxSize = arrMaxSize;
        arr = new int[maxSize];
    }

    //判断队列是否为满
    public boolean isFull(){
        return (rear + 1) % maxSize == front ;
    }

    //判断队列是否为空
    public boolean isEmpty(){
        return rear == front;
    }

    //添加数据到队列
    public void addQueue(int n){
        //判断队列是否满
        if(isFull()){
            System.out.println("队列满,不能添加~");
            return;
        }
        //直接加入数据
        arr[rear] = n;
        //将rear 后移,这里必须考虑取模
        rear = (rear +1) % maxSize;
    }

    //获取队列的数据,出队列
    public int  getQueue(){
        //判断队列是否空
        if (isEmpty()){
            throw new RuntimeException("队列为空,无法取出数据");
        }
        //这里需要分析出front是指向队列的第一个元素
        //1 先将front的值保存到一个临时变量
        //2 将front后移,考虑取模
        //3 将临时保存的变量返回
        int value = arr[front];
        front = (front + 1) % maxSize;
        return value;
    }

    //显示队列所有数据
    public void showQueue(){
        //遍历
        if(isEmpty()){
            System.out.println("队列为空,无法取出数据~");
            return;
        }
        for (int i = 0; i < arr.length; i++) {
            System.out.printf("arr[%d]=%d\n",i,arr[i]);
        }
    }
}
