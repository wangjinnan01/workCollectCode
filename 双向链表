package linkedlist;

/**
 * author:wangjinnan
 * date:2020/9/8 0008  9:43
 * description: 双向链表
 *  
 */
public class DoubleLinkedListDemo {

    public static void main(String[] args) {
        //测试
        //先创建几个节点
        HeroNode2 hero1 = new HeroNode2(1, "a", "A");
        HeroNode2 hero2 = new HeroNode2(2, "b", "B");
        HeroNode2 hero3 = new HeroNode2(3, "c", "C");
        HeroNode2 hero4 = new HeroNode2(4, "d", "D");

        //创建一个双向链表
        DoubleLinkedList doubleLinkedList = new DoubleLinkedList();
//        doubleLinkedList.add(hero1);
//        doubleLinkedList.add(hero2);
//        doubleLinkedList.add(hero3);
//        doubleLinkedList.add(hero4);


        System.out.println("修改前:");
        //显示
        doubleLinkedList.list();

        //修改
        HeroNode2 hero5 = new HeroNode2(4, "dd", "DD");
        doubleLinkedList.update(hero5);

        System.out.println("修改后:");
        doubleLinkedList.list();

        System.out.println("删除后:");
        doubleLinkedList.del(2);
        doubleLinkedList.list();

        //插入指定节点

        System.out.println("添加指定位置后:");
        doubleLinkedList.addByOrder(hero1);
        doubleLinkedList.addByOrder(hero4);
        doubleLinkedList.addByOrder(hero2);
        doubleLinkedList.addByOrder(hero3);
        doubleLinkedList.list();
    }
}

//创建一个双向链表的类
class DoubleLinkedList{
    //先初始化一个头节点,头节点不要动,不存放具体数据
    private HeroNode2 head = new HeroNode2(0,"","");

    //返回头结点
    public HeroNode2 getHead() {
        return head;
    }

    //显示链表[遍历]
    public void list(){
        //判断链表是否为空
        if (head.next == null){
            System.out.println("链表为空");
            return;
        }
        //因为头结点不能动,所以需要一个辅助变量来遍历
        HeroNode2 temp = head.next;
        while (true){
            //判断是否到链表最后
            if (temp == null){
                break;
            }
            //输出节点的信息
            System.out.println(temp);
            //将temp 后移.
            temp = temp.next;
        }
    }

    //添加一个节点到双向链表的最后
    public void add(HeroNode2 heroNode){
        //因为head节点不能动,因此我们需要一个辅助遍历temp
        HeroNode2 temp = head;

        while (true){
            //遍历链表,找到最后
            if (temp.next == null){
                break;
            }
            //如果没有找到最后,就将temp 后移一位
            temp = temp.next;
        }
        //当退出while循环时,temp就指向了链表的最后
        //形成一个双向链表
        temp.next = heroNode;
        heroNode.pre = temp;

    }

    // 添加到指定的位置(未完成)
    public void addByOrder(HeroNode2 heroNode){
        //因为头节点不能动,所以通过一个辅助指针来帮助找到添加的位置
        //因为双链表,因此temp位于当前添加位置,否则无法加入
        HeroNode2 temp = head;
        boolean flag = false;//标志添加的编号是否存在,默认为false
        while (true){
            if (temp.next == null){//说明temp已经在链表最后
                break;
            }
            if (temp.no > heroNode.no){//位置找到,就在temp的 前面  插入
                break;
            }else if (temp.no == heroNode.no){//说明希望添加的heroNode编号已经存在
                flag = true;//说明编号已经存在
                break;
            }
            temp = temp.next;//后移,遍历当前链表
        }
        //判断flag的值
        if (flag){//不能添加,说明编号存在
            System.out.printf("准备插入的编号%d 已经存在,不能加入\n",heroNode.no);

        }else {
            //插入到链表中,temp的  前面
            //如果为空直接添加

                //temp.next = heroNode;
            if (temp.pre == null){
                temp.next = heroNode;
                heroNode.pre = temp;
            }else {
                heroNode.pre = temp.pre;
                temp.pre.next = heroNode;
                heroNode.next = temp;
            }





        }


    }

    //修改一个节点,双向链表节点修改和单向链表一样
    public void update(HeroNode2 newHeroNode){
        //判断是否为空
        if (head.next == null){
            System.out.println("链表为空~");
            return;
        }

        //找到需要修改的节点,根据no编号
        //定义一个辅助变量
        HeroNode2 temp = head.next;
        boolean flag = false;//表示是否找到该节点
        while (true){
            if (temp == null){
                break;//已经遍历完这个链表
            }
            if (temp.no == newHeroNode.no){
                //找到
                flag = true;
                break;
            }
            temp = temp.next;
        }

        //根据flag 判断是否找到要 修改的节点
        if (flag){
            temp.name = newHeroNode.name;
            temp.nickname = newHeroNode.nickname;
        }else {//没有找到
            System.out.printf("没有找到编号%d 的节点,不能修改\n",newHeroNode.no);

        }

    }

    //从双向链表中删除一个节点
    //说明: 1 对于双向链表,可以直接找到删除的节点 2 找到后,自我删除
    public void del(int no){

        //判断当前链表是否为空
        if (head.next == null){
            System.out.println("当前链表为空,无法删除");
            return;
        }

        HeroNode2 temp = head.next;
        boolean flag = false;//标识是否找到待删节点
        while (true){
            if (temp == null){//已经到链表的最后
                break;

            }
            if (temp.no == no){
                //找到待删除节点的前一个节点temp
                flag = true;
                break;
            }
            temp = temp.next;//temp 后移,遍历
        }
        //判断flag
        if (flag){//找到
            //可以删除
            temp.pre.next = temp.next;
            //如果是最后一个节点不需要执行下面语句,否则出现空指针异常
            if (temp.next != null) {
                temp.next.pre = temp.pre;
            }

        }else {
            System.out.printf("要删除的%d 节点不存在\n",no);
        }
    }

}

//定义HeroNode ,每个HeroNode2 对象就是一个节点
class HeroNode2 {
    public int no;
    public String name;
    public String nickname;
    public HeroNode2 next;//指向下一个节点,默认为null
    public HeroNode2 pre;//指向前一个节点,默认为null
    //构造器
    public HeroNode2 (int no,String name,String nickname){
        this.no = no;
        this.name = name;
        this.nickname = nickname;
    }

    //为了显示方法.重新toString

    @Override
    public String toString() {
        return "HeroNode[" +
                "no=" + no +
                ", name='" + name + '\'' +
                ", nickname='" + nickname +
                ']';
    }
}
