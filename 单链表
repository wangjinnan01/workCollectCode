package linkedlist;

import java.util.Stack;

/**
 * author:wangjinnan
 * date:2020/9/3 0003  10:13
 * description:  单链表
 *  
 */
public class SingleLinkedListDemo {

    public static void main(String[] args) {

        //测试
        //先创建几个节点
        HeroNode hero1 = new HeroNode(1, "宋江", "及时雨");
        HeroNode hero2 = new HeroNode(2, "卢俊义", "玉麒麟");
        HeroNode hero3 = new HeroNode(3, "吴用", "智多星");
        HeroNode hero4 = new HeroNode(4, "林冲", "豹子头");

        //创建一个链表
        SingleLinkedList singleLinkedList = new SingleLinkedList();

        //加入
        singleLinkedList.add(hero1);
        singleLinkedList.add(hero2);
        singleLinkedList.add(hero3);
        singleLinkedList.add(hero4);

        //测试单链表反转功能
        System.out.println("原来链表~");
        singleLinkedList.list();

       /* //反转后
        System.out.println("反转后~~");
        reversetList(singleLinkedList.getHead());
        singleLinkedList.list();*/

       //逆序输出
        System.out.println("利用栈,逆序输出~~");
        reversePrint(singleLinkedList.getHead());







      /*  //链表这样,高效,直接在内存中排好顺序,再存到数据库中
        //加入按照编号的顺序
        singleLinkedList.addByOrder(hero1);
        singleLinkedList.addByOrder(hero4);
        singleLinkedList.addByOrder(hero2);
        singleLinkedList.addByOrder(hero3);
        //singleLinkedList.addByOrder(hero3);*/

       /* //显示
        singleLinkedList.list();

        System.out.println("修改后:");

        //测试修改节点的代码
        HeroNode newHeroNode = new HeroNode(2,"修改后的卢俊义","修改后的玉麒麟");
        singleLinkedList.update(newHeroNode);

        //显示
        singleLinkedList.list();

        System.out.println("删除后:");
        //删除测试
        singleLinkedList.del(1);
        singleLinkedList.del(4);
//        singleLinkedList.del(2);
//        singleLinkedList.del(3);

        //显示
        singleLinkedList.list();


        //测试getLength 单链表中有效节点的个数
        System.out.printf("单链表中有效节点的个数为:%d\n",getLength(singleLinkedList.getHead()));

        //测试是否得到倒数第k个节点
        HeroNode res = findLastIndexNode(singleLinkedList.getHead(),1);
        System.out.println("倒数第k个节点res= "+res);*/


    }


    //逆序打印(不破坏链表的结构)
    //思路: 利用栈先进后出的特点
    public static void reversePrint(HeroNode head){
        if (head.next == null){
            return;//空链表,不能打印
        }
        //创建一个链表,将各个节点压入栈
        Stack<HeroNode> stack = new Stack<>();
        HeroNode cur = head.next;
        //将链表的所有节点压入栈
        while (cur != null){
            stack.push(cur);
            cur = cur.next;//cur后移,这样就可以压入下一个节点
        }
        //将栈中节点打印,pop出栈
        while (stack.size() > 0){
            System.out.println(stack.pop());//stack特点 先进后出
        }
    }

    //将单链表反转
    public static void reversetList(HeroNode head){
        //如果当前 链表为空,或者只有一个节点,无需反转,直接返回
        if (head.next == null || head.next.next == null){
            return;
        }

        //定义一个辅助的指针,帮助遍历原链表
        HeroNode cur = head.next;
        HeroNode next = null;//指向当前节点[cur]的下一节点
        HeroNode reverseHead = new HeroNode(0,"","");
        //遍历原来的列表,每遍历一个节点,就将其取出,并放在新的链表reverseHead 的最前端
        while (cur != null){
            next = cur.next;//先暂时保存当前节点的下一节点,后面需要使用
            cur.next = reverseHead.next;//将cur 的下一节点指向新的链表的最前端
            reverseHead.next = cur;//将cur连接到新的链表上
            cur = next;//将cur 后移

        }
        //将head.next 指向reverseHead.next ,实现单链表的反转
        head.next = reverseHead.next;

    }



    /**
     * 查找单链表中的倒数第k个节点(新浪面试题)
     *
     * 思路:
     *  编写一个方法,接收head节点,同时接收一个index  index表示倒数第index个节点
     *  先把链表从头到尾遍历,得到链表的总长度 getLength
     *  得到size后,从链表的第一个遍历(size-index)个,就可以得到
     *  如果找到就返回该节点,否则返回null
     *
     * @param head
     * @param index
     * @return
     */
    public static HeroNode findLastIndexNode(HeroNode head,int index){
        //判断如果链表为空,返回null
        if (head.next == null){
            return null;
        }
        //第一次遍历得到链表的长度(节点个数)
        int size = getLength(head);
        //第二次遍历 size - index 位置,就是我们倒数的第k节点
        //先做一个index校验
        if (index <= 0 || index > size){
            return null;
        }
        //定义给辅助变量,for循环定位到倒数的index
        HeroNode cur = head.next;
        for (int i = 0; i < size - index; i++){
            cur = cur.next;
        }
        return cur;
    }



    /**
     *  获取单链表节点的个数(如果是带头结点的链表,需求不统计头结点)
     * @param head 链表的头结点
     * @return 有效节点的个数
     */
    public static  int getLength(HeroNode head){
        if (head.next == null){//空链表
            return 0;

        }
        int length = 0;
        //定义一个辅助变量
        HeroNode cur = head.next;
        while (cur != null){
            length++;
            cur = cur.next;//遍历

        }
        return length;
    }

}
    //定义SingleLinkedList 管理对象
    class SingleLinkedList {
        //先初始化一个头节点,头节点不要动,不存放具体数据
        private HeroNode head = new HeroNode(0,"","");

        //返回头结点
        public HeroNode getHead() {
            return head;
        }

        //添加节点到单向链表
        //思路:当不考虑编号顺序时
        //1 找到当前链表的最后节点
        //2 将最后这个节点的next 指向新的节点
        public void add(HeroNode heroNode){
            //因为head节点不能动,因此我们需要一个辅助遍历temp
            HeroNode temp = head;

            while (true){
                //遍历链表,找到最后
                if (temp.next == null){
                    break;
                }
                //如果没有找到最后,就将temp 后移一位
                temp = temp.next;
            }
            //当退出while循环时,temp就指向了链表的最后
            //将最后这个节点的next 指向新的节点
            temp.next = heroNode;

        }

        // 添加到指定的位置
        public void addByOrder(HeroNode heroNode){
            //因为头节点不能动,所以通过一个辅助指针来帮助找到添加的位置
            //因为单链表,因此temp位于添加位置的前一个节点,否则无法加入
            HeroNode temp = head;
            boolean flag = false;//标志添加的编号是否存在,默认为false
            while (true){
                if (temp.next == null){//说明temp已经在链表最后
                    break;

                }
                if (temp.next.no > heroNode.no){//位置找到,就在temp的后面插入
                    break;
                }else if (temp.next.no == heroNode.no){//说明希望添加的heroNode编号已经存在
                    flag = true;//说明编号已经存在
                    break;
                }
                temp = temp.next;//后移,遍历当前链表
            }
            //判断flag的值
            if (flag){//不能添加,说明编号存在
                System.out.printf("准备插入的编号%d 已经存在,不能加入\n",heroNode.no);

            }else {
                //插入到链表中,temp的后面
                heroNode.next = temp.next;
                temp.next = heroNode;
            }


        }

        //修改节点信息,根据no编号来修改,即no编号不能改

        //根据newHeroNode 的no 来修改
        public void update(HeroNode newHeroNode){
            //判断是否为空
            if (head.next == null){
                System.out.println("链表为空~");
                return;
            }

            //找到需要修改的节点,根据no编号
            //定义一个辅助变量
            HeroNode temp = head.next;
            boolean flag = false;//表示是否找到该节点
            while (true){
                if (temp == null){
                    break;//已经遍历完这个链表
                }
                if (temp.no == newHeroNode.no){
                    //找到
                    flag = true;
                    break;
                }
                temp = temp.next;
            }

            //根据flag 判断是否找到要 修改的节点
            if (flag){
                temp.name = newHeroNode.name;
                temp.nickname = newHeroNode.nickname;
            }else {//没有找到
                System.out.printf("没有找到编号%d 的节点,不能修改\n",newHeroNode.no);

            }

        }

        //删除节点
        //思路:
        //1 head 不能动,因此需要一个辅助节点temp 找到待删除节点的前一个节点
        //2 我们在比较时,是temp.next.no 和 需要删除的节点的no比较
        public void del(int no){
            HeroNode temp = head;
            boolean flag = false;//标识是否找到待删节点
            while (true){
                if (temp.next == null){//已经到链表的最后
                    break;

                }
                if (temp.next.no == no){
                    //找到待删除节点的前一个节点temp
                    flag = true;
                    break;
                }
                temp = temp.next;//temp 后移,遍历
            }
            //判断flag
            if (flag){//找到
                //可以删除
                temp.next = temp.next.next;

            }else {
                System.out.printf("要删除的%d 节点不存在\n",no);
            }
        }

        //显示链表[遍历]
        public void list(){
            //判断链表是否为空
            if (head.next == null){
                System.out.println("链表为空");
                return;
            }
            //因为头结点不能动,所以需要一个辅助变量来遍历
            HeroNode temp = head.next;
            while (true){
                //判断是否到链表最后
                if (temp == null){
                    break;
                }
                //输出节点的信息
                System.out.println(temp);
                //将temp 后移.
                temp = temp.next;
            }
        }



    }


    //定义HeroNode ,每个HeroNode 对象就是一个节点
    class HeroNode {
        public int no;
        public String name;
        public String nickname;
        public HeroNode next;//指向下一个节点
        //构造器
        public HeroNode (int no,String name,String nickname){
            this.no = no;
            this.name = name;
            this.nickname = nickname;
        }

        //为了显示方法.重新toString

        @Override
        public String toString() {
            return "HeroNode[" +
                    "no=" + no +
                    ", name='" + name + '\'' +
                    ", nickname='" + nickname +
                    ']';
        }
    }
